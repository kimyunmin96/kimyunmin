
https://www.youtube.com/watch?v=N8BkmdZzxDg

1. redis 설치

2. 폴더 하나 만들고 redis.conf 만든다
	- vi redis.conf
		# - port 7000
		#  cluster-enabled yes
		#  cluster-config-file nodes.conf
		#  cluster-node-timeout 5000
		#  appendonly yes
		port 7003
		cluster-enabled yes
		cluster-config-file nodes.conf
		cluster-node-timeout 5000
		maxmemory 5gb
		logfile logs/redis_7003.log
		appendonly yes

3. 폴더 7000 7001 7002 7003 7004 7005   (6개의 서버를 돌리기 위해 폴더 생성)
	- 위에 만든 폴더 안에 redis.conf 를 copy 한다. ( 모든 폴더 )
	- cp redis.conf 7000/redis.conf (7001, 7002, 7003, 7004, 7005)
	- copy 한 redis.conf 안에 수정해서 port 들을 알맞게 변경해준다.
		- vi 7000/redis.conf
		- vi 7001/redis.conf
		- vi 7002/redis.conf
		- vi 7003/redis.conf
		- vi 7004/redis.conf
		- vi 7005/redis.conf
		- vi 7006/redis.conf
		
4. redis-server 를 켜준다.
	- redis-server ./redis.conf (7000)
	- redis-server ./redis.conf (7001)
	- redis-server ./redis.conf (7002)
	- redis-server ./redis.conf (7003)
	- redis-server ./redis.conf (7004)
	- redis-server ./redis.conf (7005)
	- redis-server ./redis.conf (7006)
	
5. redis dash cli 수행
- redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1[복제본 수]

Adding replica 127.0.0.1:7003 to 127.0.0.1:7000
>>> Trying to optimize slaves allocation for anti-affinity
[WARNING] Some slaves are in the same host as their master
M: 0bc227c98fdf58638b68e55677bc0fc8ea76ca2a 127.0.0.1:7000     - ca2a
   slots:[0-5460] (5461 slots) master
M: 476904fb62ea670adb6417f99b265ded54e157e5 127.0.0.1:7001
   slots:[5461-10922] (5462 slots) master
M: 4deb40c7f31162aabd1bb86d1878254fc1383f4c 127.0.0.1:7002
   slots:[10923-16383] (5461 slots) master
S: b99722fd32e8f375728cb1609e4c3eaec9e877ed 127.0.0.1:7003
   replicates 476904fb62ea670adb6417f99b265ded54e157e5
S: 07ff03347933f48ef8e1276f46effed80364cb7e 127.0.0.1:7004
   replicates 0bc227c98fdf58638b68e55677bc0fc8ea76ca2a 			- ca2a
S: ddba198819f97261ceb608e8b7f38de1bf6fc563 127.0.0.1:7005
   replicates 4deb40c7f31162aabd1bb86d1878254fc1383f4c
S: eedc9ea571675807399f7eeed00dc6b111c3f24f 127.0.0.1:7006
   replicates 0bc227c98fdf58638b68e55677bc0fc8ea76ca2a
Can I set the above configuration? (type 'yes' to accept): yes


6. cluster slots 확인

127.0.0.1:7000> ping
PONG
127.0.0.1:7000> cluster slots
1) 1) (integer) 0
   2) (integer) 5460
   3) 1) "127.0.0.1"
      2) (integer) 7000
      3) "0bc227c98fdf58638b68e55677bc0fc8ea76ca2a"
      4) (empty array)
   4) 1) "127.0.0.1"
      2) (integer) 7004
      3) "07ff03347933f48ef8e1276f46effed80364cb7e"
      4) (empty array)
   5) 1) "127.0.0.1"
      2) (integer) 7006
      3) "eedc9ea571675807399f7eeed00dc6b111c3f24f"
      4) (empty array)
2) 1) (integer) 5461
   2) (integer) 10922
   3) 1) "127.0.0.1"
      2) (integer) 7001
      3) "476904fb62ea670adb6417f99b265ded54e157e5"
      4) (empty array)
   4) 1) "127.0.0.1"
      2) (integer) 7003
      3) "b99722fd32e8f375728cb1609e4c3eaec9e877ed"
      4) (empty array)
3) 1) (integer) 10923
   2) (integer) 16383
   3) 1) "127.0.0.1"
      2) (integer) 7002
      3) "4deb40c7f31162aabd1bb86d1878254fc1383f4c"
      4) (empty array)
   4) 1) "127.0.0.1"
      2) (integer) 7005
      3) "ddba198819f97261ceb608e8b7f38de1bf6fc563"
      4) (empty array)
	  

7. cluster info 확인

127.0.0.1:7000> cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:7
cluster_size:3
cluster_current_epoch:7
cluster_my_epoch:1
cluster_stats_messages_ping_sent:382
cluster_stats_messages_pong_sent:377
cluster_stats_messages_sent:759
cluster_stats_messages_ping_received:371
cluster_stats_messages_pong_received:382
cluster_stats_messages_meet_received:6
cluster_stats_messages_received:759
total_cluster_links_buffer_limit_exceeded:0
127.0.0.1:7000> set foo bar
-> Redirected to slot [12182] located at 127.0.0.1:7002		- 7002
OK
127.0.0.1:7002> get bar
-> Redirected to slot [5061] located at 127.0.0.1:7000		- 7000
(nil)



* 제한 설정
항목	설명
maxclients 128	Redis 서버에서 클라이언트의 접속을 동시에 몇 개 까지 받아들일지 설정하는 부분이다. 0으로 설정할 경우 무제한으로 접속을 받아들이며, 설정된 수를 초과할 경우 에러를 반환해준다.
maxmemory	서버에서 사용할 물리적 메모리 양을 결정한다. 이 메모리양에는 실제 데이터는 물론 각종 설정 상태를 기억하는 부분까지 포함된다.

이 값이 0일 경우 SWAP 메모리를 사용할 때까지 메모리는 계속 ㅓ질 수 있다. Persistence 기능을 사용한다거나 Replica 노드를 가질 경우에는 fork()가 발생할 수 있기에 주의해야한다. 권장하는 값은 가용 메모리의 60 - 70%에서 설정한다.
maxmemory-policy volatile-lru	maxmemory에서 설정한 메모리를 초과된 후 데이터를 쓰려고 할 때의 정책 설정 옵션이다.
maxmemory-samples 3	LRU 알고리즘이나 만기시각으로 키를 선택할 때, 정확하게 조건에 맞는 키를 선택하는게 아닌 효율을 위해 몇 개의 키들을 선택해, 그 중 최근에 덜 사용한 키를 선택하는 방식을 사용한다. 이때 효율을 위해 선택한 키의 수를 설정해주는 부분이다.


maxmemory 정책 옵션

항목				설명
volatile-lru	기본값으로, 만기시각이 설정된 키들 중에서 LRU 알고리즘에 의해 키를 선택하여 삭제하는 옵션이다. 즉, 가장 최근에 사용하지 않은 값을 삭제하는 정책이다. 캐시용도로 사용할 경우 필요없는 값을 삭제하고 새로운 입력을 받아들이는 것이 좋기에 해당 옵션을 권장한다.
allkeys-lru	LRU 알고리즘에 의해 키를 선택하여 삭제하는 옵션이다.
volatile-random	만기시각이 설정된 키들 중에서 랜덤 키를 선택하여 삭제하는 옵션이다.
allkeys-random	랜덤하게 키를 선택하여 삭제하는 옵션이다.
volatile-ttl	만기시각이 설정된 키들 중에서 만기시각이 가장 가까운 키를 선택하여 삭제하는 옵션이다.
noeviction	어떤 키도 삭제하지 않고, error on write operations를 돌려주는 옵션이다. 즉, 메모리가 가득 찰 경우 더이상 새로운 입력을 받지 않는 정책이다.

https://ozofweird.tistory.com/entry/Redis-Redis-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC

노드 지우기
redis-cli --cluster call 127.0.0.1:7001 cluster forget ddba198819f97261ceb608e8b7f38de1bf6fc563	[노드 id]


sentinel - 장애가 발생하여 master node 가 죽었을 때 자동으로 장애 극복 조치 ( fail-over ) 해주는 서비스
https://co-de.tistory.com/15
https://ssoco.tistory.com/17


master slave 
https://backtony.github.io/redis/2021-09-03-redis-3/


--- 다시 구성 해보자 ---   -- https://co-de.tistory.com/24
마스터 로드 만들기 
redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002

slave 등록
redis-cli --cluster add-node 127.0.0.1:7003 127.0.0.1:7000 --cluster-slave
redis-cli --cluster add-node 127.0.0.1:7004 127.0.0.1:7001 --cluster-slave
redis-cli --cluster add-node 127.0.0.1:7005 127.0.0.1:7002 --cluster-slave
redis-cli --cluster add-node 127.0.0.1:7006 127.0.0.1:7000 --cluster-slave
redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:7001 --cluster-slave
redis-cli --cluster add-node 127.0.0.1:7008 127.0.0.1:7002 --cluster-slave

redis-server 7000 master node 를 죽이면 7003 node(slave node) 가 master node 가 된다
	- redis-server 7000 이 살아나면 7003이 마스터로 돌고 있기 때문에 slave로 작동이 된다.
	

redisearch - redis.conf

port 7001
cluster-enabled yes
cluster-config-file node.conf
cluster-node-timeout 5000
# AOF 를 통해 failover 된 레디스 노드 재 시작시 이전 데이터를 다시 로드해 올 수 있습니다.
appendonly yes

daemonize no
loadmodule /opt/redis-stack/lib/redisearch.so
loadmodule /opt/redis-stack/lib/redisgraph.so
loadmodule /opt/redis-stack/lib/redistimeseries.so
loadmodule /opt/redis-stack/lib/rejson.so
loadmodule /opt/redis-stack/lib/redisbloom.so

protected-mode yes
bind 0.0.0.0

maxmemory 5gb